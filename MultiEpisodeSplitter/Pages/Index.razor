@page "/"
@using FFMpegCore

@code {
    private const string STATUS_WARNING = "warning";
    private const string STATUS_SUCCESS = "success";
    private const string STATUS_ERROR = "error";

    private const string STATUSTEXT_NO_FILE = "No file is selected, please select an episode file to split";
    private const string STATUSTEXT_FILE_SELECTED = "Please mark intro end, episode 2 and after texts";

    private bool isFileOpen = false;
    private string filePath = null;

    private string status = STATUS_WARNING;
    private string statusText = STATUSTEXT_NO_FILE;

    private string base64image;
    private System.Drawing.Size videoSize;

    private int rangeCurrent = 0;
    private int rangeSelected = 0;
    private int rangeEnd = 100;

    [CascadingParameter]
    public EventCallback<bool> DisplaySpinner { get; set; }

    private async Task OpenFile()
    {
        var result = await FilePicker.Default.PickAsync(new PickOptions
            {
                FileTypes = FilePickerFileType.Videos,
                PickerTitle = "Select Episode"
            });

        if (result != null)
        {
            await this.DisplaySpinner.InvokeAsync(true);
            CloseFile();

            try
            {
                filePath = result.FullPath;

                var mediaInfo = await FFProbe.AnalyseAsync(filePath);
                videoSize = new System.Drawing.Size(mediaInfo.PrimaryVideoStream.Width, mediaInfo.PrimaryVideoStream.Height);

                await LoadImage(5);

                rangeSelected = rangeCurrent = 5;
                rangeEnd = (int)mediaInfo.Duration.TotalSeconds;

                isFileOpen = true;
                status = STATUS_SUCCESS;
                statusText = STATUSTEXT_FILE_SELECTED;
            }
            catch (Exception ex)
            {
                status = STATUS_ERROR;
                statusText = "Something went wrong: " + ex.Message;
            }
            await this.DisplaySpinner.InvokeAsync(false);
        }
    }

    private void CloseFile()
    {
        status = STATUS_WARNING;
        status = STATUSTEXT_NO_FILE;

        rangeCurrent = 0;
        rangeSelected = 0;
        rangeEnd = 100;

        isFileOpen = false;
        base64image = null;
        videoSize = System.Drawing.Size.Empty;
    }

    private async Task OnRangeChanged(ChangeEventArgs args)
    {
        rangeSelected = Convert.ToInt32(args.Value);

        await this.DisplaySpinner.InvokeAsync(true);
        try
        {
            await LoadImage(rangeSelected);
        }
        catch (Exception ex)
        {
            status = STATUS_ERROR;
            statusText = "Something went wrong: " + ex.Message;
        }
        await this.DisplaySpinner.InvokeAsync(false);
    }

    private void OnRangeDrag(ChangeEventArgs args)
    {
        rangeCurrent = Convert.ToInt32(args.Value);
    }

    private Task LoadImage(int seconds)
    {
        var bitmap = FFMpeg.Snapshot(filePath, videoSize, TimeSpan.FromSeconds(seconds));

        using (var ms = new MemoryStream())
        {
            bitmap.Save(ms, System.Drawing.Imaging.ImageFormat.Jpeg);
            base64image = string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(ms.GetBuffer()));
        }

        return Task.CompletedTask;
    }
}

<div class="row">
    <div class="col">
        <button class="btn btn-dark" @onclick="OpenFile">Open file</button>
        <button class="btn @(isFileOpen ? "btn-dark" : "btn-light")" @onclick="CloseFile" disabled="@(!isFileOpen)">Close file</button>

        <div class="vr mx-3"></div>

        <button class="btn btn-primary" disabled="@(!isFileOpen)">Mark intro end</button>
        <button class="btn btn-success" disabled="@(!isFileOpen)">Mark episode 2 start</button>
        <button class="btn btn-info" disabled="@(!isFileOpen)">Mark after text start</button>
    </div>
</div>

<hr />

<div class="alert alert-@status" role="alert">
    @statusText
</div>

<div class="row image-container">
    <div class="col-8">
        <div class="row">
            <div class="col-1 text-center text-secondary">
                @rangeCurrent/@(rangeEnd)s
            </div>
            <div class="col-11">
                <input type="range" class="form-range" min="0" max="@rangeEnd" id="disabledRange" value="@rangeSelected" disabled="@(!isFileOpen)" @onchange=OnRangeChanged @oninput=OnRangeDrag>
            </div>
        </div>
        <img class="rounded align-content-center img-fluid" src="@base64image" alt="No episode selected" />
    </div>
    <div class="col-4">
        list of break points
    </div>
</div>
