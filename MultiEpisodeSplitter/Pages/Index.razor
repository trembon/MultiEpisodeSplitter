@page "/"
@using MultiEpisodeSplitter.Services;
@inject IMediaInformationService mediaInformationService;

@code {
    private const string STATUS_WARNING = "warning";
    private const string STATUS_SUCCESS = "success";
    private const string STATUS_ERROR = "error";

    private const string STATUSTEXT_NO_FILE = "No file is selected, please select an episode file to split";
    private const string STATUSTEXT_FILE_SELECTED = "Please mark episodes to split file";

    private Models.MediaInformation currentMedia;

    private string status = STATUS_WARNING;
    private string statusText = STATUSTEXT_NO_FILE;

    private string base64image;

    private int rangeCurrent = 0;
    private int rangeSelected = 0;
    private int rangeEnd = 100;

    private int? episodeIntroEnd;
    private int? episodeTwoStart;
    private int? episodeAfterTextStart;

    [CascadingParameter]
    public EventCallback<bool> DisplaySpinner { get; set; }

    private async Task OpenFile()
    {
        var result = await FilePicker.Default.PickAsync(new PickOptions
            {
                FileTypes = FilePickerFileType.Videos,
                PickerTitle = "Select Episode"
            });

        if (result != null)
        {
            await this.DisplaySpinner.InvokeAsync(true);
            CloseFile();

            try
            {
                currentMedia = await mediaInformationService.LoadMedia(result.FullPath);
                base64image = await mediaInformationService.GetStillFromMediaAsBase64(currentMedia, 5);

                rangeSelected = rangeCurrent = 5;
                rangeEnd = (int)currentMedia.MediaData.Duration.TotalSeconds;

                status = STATUS_SUCCESS;
                statusText = STATUSTEXT_FILE_SELECTED;
            }
            catch (Exception ex)
            {
                status = STATUS_ERROR;
                statusText = "Something went wrong: " + ex.Message;
            }
            await this.DisplaySpinner.InvokeAsync(false);
        }
    }

    private void CloseFile()
    {
        status = STATUS_WARNING;
        status = STATUSTEXT_NO_FILE;

        rangeCurrent = 0;
        rangeSelected = 0;
        rangeEnd = 100;

        episodeIntroEnd = null;
        episodeTwoStart = null;
        episodeAfterTextStart = null;

        currentMedia = null;
        base64image = null;
    }

    private async Task OnRangeChanged(ChangeEventArgs args)
    {
        rangeSelected = Convert.ToInt32(args.Value);

        await this.DisplaySpinner.InvokeAsync(true);
        try
        {
            base64image = await mediaInformationService.GetStillFromMediaAsBase64(currentMedia, rangeSelected);
        }
        catch (Exception ex)
        {
            status = STATUS_ERROR;
            statusText = "Something went wrong: " + ex.Message;
        }
        await this.DisplaySpinner.InvokeAsync(false);
    }

    private void OnRangeDrag(ChangeEventArgs args)
    {
        rangeCurrent = Convert.ToInt32(args.Value);
    }

    private void MarkIntroEnd()
    {
        episodeIntroEnd = rangeSelected;
    }

    private void MarkEpisodeTwoStart()
    {
        episodeTwoStart = rangeSelected;
    }

    private void MarkAfterTextStart()
    {
        episodeAfterTextStart = rangeSelected;
    }
}

<div class="row">
    <div class="col-auto">
        <h1>Multi Episode Splitter</h1>
    </div>
    <div class="col">
        <div class="alert alert-@status mb-0" role="alert">
            @statusText
        </div>
    </div>
</div>

<hr />

<div class="row mb-3">
    <div class="col-auto">
        <button class="btn btn-dark" @onclick="OpenFile">Open file</button>
    </div>
    <div class="col">
        <input class="form-control" type="text" placeholder="Currently open file" readonly value="@Path.GetFileName(currentMedia?.FullPath)" />
    </div>
</div>

<div class="row">
    <div class="col">
        <button class="btn btn-secondary me-2" @onclick=MarkIntroEnd disabled="@(currentMedia == null)">Mark episode start</button>
        <button class="btn btn-secondary me-2" @onclick=MarkEpisodeTwoStart disabled="@(currentMedia == null)">Mark episode end</button>
    </div>
    <div class="col-auto">
        <button class="btn @(currentMedia != null ? "btn-dark" : "btn-light")" @onclick=CloseFile disabled="@(currentMedia == null)">Close file</button>
    </div>
</div>

<hr />

<div class="row image-container">
    <div class="col-8">
        <div class="row">
            <div class="col-1 text-center text-secondary">
                @rangeCurrent/@(rangeEnd)s
            </div>
            <div class="col-11">
                <input type="range" class="form-range" min="0" max="@rangeEnd" id="disabledRange" value="@rangeSelected" disabled="@(currentMedia == null)" @onchange=OnRangeChanged @oninput=OnRangeDrag>
            </div>
        </div>
        <img class="rounded align-content-center img-fluid" src="@base64image" alt="No episode selected" />
    </div>
    <div class="col-4">
        <h3 class="text-center mb-5">Select points</h3>
        @if (episodeIntroEnd.HasValue)
        {
            <p><b>Intro end:</b> @(episodeIntroEnd)s</p>
        }
        @if (episodeTwoStart.HasValue)
        {
            <p><b>Episode Two start:</b> @(episodeTwoStart)s</p>
        }
        @if (episodeAfterTextStart.HasValue)
        {
            <p><b>After texts start:</b> @(episodeAfterTextStart)s</p>
        }

        @*<h3 class="text-center my-5">Output files</h3>
        <p>@episodeOneFile</p>
        <p>@episodeTwoFile</p>*@
    </div>
</div>
