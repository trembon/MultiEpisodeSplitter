@page "/"
@using MultiEpisodeSplitter.Models;
@using MultiEpisodeSplitter.Services;
@using CommunityToolkit.Maui.Storage;
@inject IMediaSplitService mediaSplitService;
@inject IMediaInformationService mediaInformationService;

@code {
    private const string STATUS_WARNING = "warning";
    private const string STATUS_SUCCESS = "success";
    private const string STATUS_ERROR = "error";

    private const string STATUSTEXT_NO_FILE = "No file is selected, please select an episode file to split";
    private const string STATUSTEXT_FILE_SELECTED = "Please mark episodes to split file";

    private Models.MediaInformation currentMedia;
    private List<Models.SplitMarking> splits = new();

    private string status = STATUS_WARNING;
    private string statusText = STATUSTEXT_NO_FILE;

    private string base64image;

    private int rangeCurrent = 0;
    private int rangeSelected = 0;
    private int rangeEnd = 100;

    [CascadingParameter]
    public EventCallback<bool> DisplaySpinner { get; set; }

    private async Task OpenFile()
    {
        var result = await FilePicker.Default.PickAsync(new PickOptions
            {
                FileTypes = FilePickerFileType.Videos,
                PickerTitle = "Select Episode"
            });

        if (result != null)
        {
            await this.DisplaySpinner.InvokeAsync(true);
            CloseFile();

            try
            {
                currentMedia = await mediaInformationService.LoadMedia(result.FullPath);
                base64image = await mediaInformationService.GetStillFromMediaAsBase64(currentMedia, 5);

                rangeSelected = rangeCurrent = 5;
                rangeEnd = (int)currentMedia.MediaData.Duration.TotalSeconds;

                status = STATUS_SUCCESS;
                statusText = STATUSTEXT_FILE_SELECTED;
            }
            catch (Exception ex)
            {
                status = STATUS_ERROR;
                statusText = "Something went wrong: " + ex.Message;
            }
            await this.DisplaySpinner.InvokeAsync(false);
        }
    }

    private void CloseFile()
    {
        status = STATUS_WARNING;
        status = STATUSTEXT_NO_FILE;

        rangeCurrent = 0;
        rangeSelected = 0;
        rangeEnd = 100;

        currentMedia = null;
        splits = new();
        base64image = null;
    }

    private async Task OnRangeChanged(ChangeEventArgs args)
    {
        rangeSelected = Convert.ToInt32(args.Value);

        await this.DisplaySpinner.InvokeAsync(true);
        try
        {
            base64image = await mediaInformationService.GetStillFromMediaAsBase64(currentMedia, rangeSelected);
        }
        catch (Exception ex)
        {
            status = STATUS_ERROR;
            statusText = "Something went wrong: " + ex.Message;
        }
        await this.DisplaySpinner.InvokeAsync(false);
    }

    private void OnRangeDrag(ChangeEventArgs args)
    {
        rangeCurrent = Convert.ToInt32(args.Value);
    }

    private void MarkIntro()
    {
        splits = mediaSplitService.AddSplitIntro(rangeSelected, currentMedia, splits);
    }

    private void MarkEpisodeStart()
    {
        splits = mediaSplitService.AddSplitStart(rangeSelected, currentMedia, splits);
    }

    private void MarkEpisodeEnd()
    {
        splits = mediaSplitService.AddSplitEnd(rangeSelected, currentMedia, splits);
    }

    private void MarkOutro()
    {
        splits = mediaSplitService.AddSplitOutro(rangeSelected, currentMedia, splits);
    }

    private void RemoveSplit(SplitMarking split)
    {
        splits.Remove(split);
    }

    private async Task StartProcess()
    {
        var result = await FolderPicker.Default.PickAsync(CancellationToken.None);
        if (result.IsSuccessful)
        {
            await this.DisplaySpinner.InvokeAsync(true);
            try
            {
                await mediaSplitService.SplitMedia(result.Folder.Path, currentMedia, splits);

                status = STATUS_SUCCESS;
                statusText = "The episode split is now done!";
            }
            catch (Exception ex)
            {
                status = STATUS_ERROR;
                statusText = "Something went wrong: " + ex.Message;
            }
            await this.DisplaySpinner.InvokeAsync(false);
        }
    }
}

<div class="row">
    <div class="col-auto">
        <h1>Multi Episode Splitter</h1>
    </div>
    <div class="col">
        <div class="alert alert-@status mb-0" role="alert">
            @statusText
        </div>
    </div>
</div>

<hr />

<div class="row mb-3">
    <div class="col-auto">
        <button class="btn btn-dark" @onclick="OpenFile">Open file</button>
    </div>
    <div class="col">
        <input class="form-control" type="text" placeholder="Currently open file" readonly value="@Path.GetFileName(currentMedia?.FullPath)" />
    </div>
</div>

<div class="row">
    <div class="col">
        <button class="btn btn-secondary me-2" @onclick=MarkIntro disabled="@(currentMedia == null)">Mark intro</button>
        <button class="btn btn-secondary me-2" @onclick=MarkEpisodeStart disabled="@(currentMedia == null)">Mark episode start</button>
        <button class="btn btn-secondary me-2" @onclick=MarkEpisodeEnd disabled="@(currentMedia == null)">Mark episode end</button>
        <button class="btn btn-secondary me-2" @onclick=MarkOutro disabled="@(currentMedia == null)">Mark outro</button>
    </div>
    <div class="col-auto">
        <button class="btn @(currentMedia != null ? "btn-dark" : "btn-light")" @onclick=CloseFile disabled="@(currentMedia == null)">Close file</button>
    </div>
</div>

<hr />

<div class="row image-container">
    <div class="col-8">
        <div class="row">
            <div class="col-1 text-center text-secondary">
                @rangeCurrent/@(rangeEnd)s
            </div>
            <div class="col-11">
                <input type="range" class="form-range" min="0" max="@rangeEnd" id="disabledRange" value="@rangeSelected" disabled="@(currentMedia == null)" @onchange=OnRangeChanged @oninput=OnRangeDrag>
            </div>
        </div>
        <img class="rounded align-content-center img-fluid" src="@base64image" alt="No episode selected" />
    </div>
    <div class="col-4">
        <h3 class="text-center mb-5">Select points</h3>

        @foreach(var split in splits)
        {
            if (split.IsIntro)
            {
                <p><b>Intro:</b> @(split.Start)s - @(split.End)s <span style="cursor: pointer;" @onclick="() => RemoveSplit(split)">X</span></p>
            }
            else if (split.IsOutro)
            {
                <p><b>Outro:</b> @(split.Start)s - @(split.End)s <span style="cursor: pointer;" @onclick="() => RemoveSplit(split)">X</span></p>
            }
            else
            {
                <p><b>Split:</b> @(split.Start)s - @(split.End)s <span style="cursor: pointer;" @onclick="() => RemoveSplit(split)">X</span></p>
            }
        }

        <h3 class="text-center my-5">Output files</h3>
        @foreach(string filename in mediaSplitService.CalculateFileNames(currentMedia, splits))
        {
            <p>@filename</p>
        }

        <hr/>

        <button class="btn btn-primary" @onclick=StartProcess disabled="@(currentMedia == null || !splits.Any())">Process</button>
    </div>
</div>
